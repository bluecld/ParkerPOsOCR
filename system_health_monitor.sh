#!/bin/sh# Comprehensive System Health Monitor and Self-Healing Script# This script monitors all components and provides automatic recoverySCRIPT_DIR="/volume1/Main/Main/ParkerPOsOCR"DOCKER_DIR="$SCRIPT_DIR/docker_system"LOG_FILE="$SCRIPT_DIR/system_health.log"DASHBOARD_DIR="$SCRIPT_DIR/dashboard"# Function to log with timestamplog_message() {    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"}# Function to check Docker daemoncheck_docker_daemon() {    if docker info >/dev/null 2>&1; then        return 0    else        return 1    fi}# Function to check PO containercheck_po_container() {    if docker ps | grep -q "po-processor"; then        return 0    else        return 1    fi}# Function to check dashboardcheck_dashboard() {    if timeout 10 curl -k -s --connect-timeout 5 https://localhost:9443/api/health >/dev/null 2>&1; then        return 0    elif timeout 5 netstat -tuln | grep -q ":9443"; then        # Port is open but not responding - may need restart        return 2    else        return 1    fi}# Function to check Mac monitor (optional, doesn't break on failure)check_mac_monitor() {    # Use timeout to prevent hanging on SSH    if timeout 8 ssh -o ConnectTimeout=3 -o BatchMode=yes Anthony@192.168.0.105 'ps aux | grep -q pdf_auto_print_monitor && echo "RUNNING"' 2>/dev/null | grep -q "RUNNING"; then        return 0    else        return 1    fi}# Function to restart PO containerrestart_po_container() {    log_message "Attempting to restart PO container..."    cd "$DOCKER_DIR"    if docker-compose restart po-processor >/dev/null 2>&1; then        sleep 10        if check_po_container; then            log_message "‚úÖ PO container restarted successfully"            return 0        else            log_message "‚ùå PO container restart failed"            return 1        fi    else        log_message "‚ùå Failed to execute docker-compose restart"        return 1    fi}# Function to restart dashboardrestart_dashboard() {    log_message "Attempting to restart dashboard..."        # Find and kill existing dashboard processes    DASH_PIDS=$(ps aux | grep -E "(start_dashboard|app_secure)" | grep -v grep | awk '{print $2}')    if [ -n "$DASH_PIDS" ]; then        for pid in $DASH_PIDS; do            kill -TERM "$pid" 2>/dev/null        done        sleep 5        # Force kill if still running        for pid in $DASH_PIDS; do            kill -KILL "$pid" 2>/dev/null        done    fi        # Start dashboard    cd "$DASHBOARD_DIR"    if [ -f "start_dashboard.sh" ]; then        nohup sh start_dashboard.sh >/dev/null 2>&1 &        sleep 10        if check_dashboard; then            log_message "‚úÖ Dashboard restarted successfully"            return 0        else            log_message "‚ùå Dashboard restart failed"            return 1        fi    else        log_message "‚ùå Dashboard start script not found"        return 1    fi}# Function to perform system recoverysystem_recovery() {    log_message "üö® SYSTEM RECOVERY MODE ACTIVATED"        recovery_success=true        # Check and fix Docker daemon (can't fix this automatically)    if ! check_docker_daemon; then        log_message "‚ùå CRITICAL: Docker daemon is down - manual intervention required"        recovery_success=false    fi        # Check and fix PO container    if ! check_po_container; then        log_message "‚ö†Ô∏è PO container is down - attempting restart"        if ! restart_po_container; then            recovery_success=false        fi    fi        # Check and fix dashboard    dashboard_status=$(check_dashboard; echo $?)    if [ "$dashboard_status" -eq 1 ]; then        log_message "‚ö†Ô∏è Dashboard is down - attempting restart"        if ! restart_dashboard; then            recovery_success=false        fi    elif [ "$dashboard_status" -eq 2 ]; then        log_message "‚ö†Ô∏è Dashboard is unresponsive - attempting restart"        if ! restart_dashboard; then            recovery_success=false        fi    fi        if [ "$recovery_success" = true ]; then        log_message "‚úÖ System recovery completed successfully"        return 0    else        log_message "‚ùå System recovery partially failed - manual intervention may be needed"        return 1    fi}# Function to perform health checkhealth_check() {    log_message "üîç Performing system health check..."        docker_ok=true    po_ok=true    dashboard_ok=true    mac_ok=true        # Check Docker daemon    if check_docker_daemon; then        log_message "‚úÖ Docker daemon: HEALTHY"    else        log_message "‚ùå Docker daemon: DOWN"        docker_ok=false    fi        # Check PO container    if check_po_container; then        log_message "‚úÖ PO container: RUNNING"    else        log_message "‚ùå PO container: DOWN"        po_ok=false    fi        # Check dashboard    dashboard_status=$(check_dashboard; echo $?)    if [ "$dashboard_status" -eq 0 ]; then        log_message "‚úÖ Dashboard: HEALTHY"    elif [ "$dashboard_status" -eq 2 ]; then        log_message "‚ö†Ô∏è Dashboard: UNRESPONSIVE"        dashboard_ok=false    else        log_message "‚ùå Dashboard: DOWN"        dashboard_ok=false    fi        # Check Mac monitor (don't break on failure)    if check_mac_monitor; then        log_message "‚úÖ Mac PDF monitor: RUNNING"    else        log_message "‚ö†Ô∏è Mac PDF monitor: NOT RESPONDING (this is optional)"        mac_ok=false    fi        # Overall system health    if [ "$docker_ok" = true ] && [ "$po_ok" = true ] && [ "$dashboard_ok" = true ]; then        log_message "üéØ OVERALL SYSTEM STATUS: HEALTHY"        return 0    else        log_message "‚ö†Ô∏è OVERALL SYSTEM STATUS: NEEDS ATTENTION"        return 1    fi}# Function to watch system continuouslywatch_mode() {    log_message "üîç Starting continuous system monitoring..."    echo "üîç System Health Monitor - Press Ctrl+C to stop"    echo "üìù Log file: $LOG_FILE"        failure_count=0    max_failures=3        while true; do        if health_check >/dev/null 2>&1; then            if [ "$failure_count" -gt 0 ]; then                log_message "‚úÖ System recovered - resetting failure count"                failure_count=0            fi            echo "‚úÖ $(date '+%H:%M:%S') System healthy"        else            failure_count=$((failure_count + 1))            echo "‚ö†Ô∏è $(date '+%H:%M:%S') System unhealthy (failure $failure_count/$max_failures)"                        if [ "$failure_count" -ge "$max_failures" ]; then                log_message "üö® Multiple failures detected - initiating recovery"                if system_recovery; then                    failure_count=0                    echo "‚úÖ $(date '+%H:%M:%S') Recovery completed"                else                    echo "‚ùå $(date '+%H:%M:%S') Recovery failed - continuing monitoring"                    # Reset count to prevent spam recovery attempts                    failure_count=0                fi            fi        fi                sleep 120  # Check every 2 minutes    done}# Function to setup auto-monitoring cron jobsetup_autostart() {    log_message "Setting up automatic system monitoring..."        # Create cron job for health monitoring    CRON_JOB="*/5 * * * * /volume1/Main/Main/ParkerPOsOCR/system_health_monitor.sh auto-heal >/dev/null 2>&1"        # Check if cron job already exists    if ! (crontab -l 2>/dev/null | grep -q system_health_monitor.sh); then        # Add the cron job        (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -        log_message "‚úÖ Auto-monitoring cron job added (every 5 minutes)"    else        log_message "‚úÖ Auto-monitoring already configured"    fi        # Create reboot startup job    REBOOT_JOB="@reboot sleep 120 && /volume1/Main/Main/ParkerPOsOCR/system_health_monitor.sh auto-heal >/dev/null 2>&1"        if ! (crontab -l 2>/dev/null | grep -q "@reboot.*system_health_monitor"); then        (crontab -l 2>/dev/null; echo "$REBOOT_JOB") | crontab -        log_message "‚úÖ Auto-recovery on reboot configured"    else        log_message "‚úÖ Reboot auto-recovery already configured"    fi        echo "üéØ Self-healing system monitoring configured!"    echo "- Health checks every 5 minutes"    echo "- Auto-recovery on system failures"      echo "- Auto-start monitoring after reboot"}# Main script logiccase "${1:-check}" in    "check")        health_check        ;;    "watch")        watch_mode        ;;    "recover"|"fix")        system_recovery        ;;    "auto-heal")        # Silent mode for cron - only log, don't output to stdout        if ! health_check >/dev/null 2>&1; then            system_recovery >/dev/null 2>&1        fi        ;;    "setup")        setup_autostart        ;;    "status")        echo "üìä ParkerPOsOCR System Status Report"        echo "===================================="        health_check        echo ""        echo "üìÅ Recent activity:"        if [ -f "$LOG_FILE" ]; then            echo "Last 5 log entries:"            tail -5 "$LOG_FILE" | sed 's/^/  /'        else            echo "No log file found yet"        fi        ;;    *)        echo "ParkerPOsOCR System Health Monitor"        echo "=================================="        echo "Usage: $0 [command]"        echo ""        echo "Commands:"        echo "  check      - Perform single health check"        echo "  watch      - Continuous monitoring mode"        echo "  recover    - Force system recovery"        echo "  auto-heal  - Silent auto-healing (for cron)"        echo "  setup      - Configure automatic monitoring"        echo "  status     - Show detailed system status"        echo ""        echo "Examples:"        echo "  $0 check           # Check system health once"        echo "  $0 watch           # Monitor continuously"        echo "  $0 setup           # Enable auto-monitoring"        ;;esac